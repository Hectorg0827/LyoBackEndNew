"""
Error handling module.

This module defines custom exceptions and error handlers for the application.
"""
from typing import Any, Dict, List, Optional, Union, Tuple, Type

from fastapi import FastAPI, Request, status
from fastapi.exceptions import RequestValidationError
from fastapi.responses import JSONResponse
from pydantic import ValidationError
from starlette.exceptions import HTTPException as StarletteHTTPException

from api.core.config import settings
from api.core.i18n import get_translator
import importlib
import inspect
import logging

logger = logging.getLogger(__name__)


def _load_ai_error_types() -> List[Type]:
    """
    Dynamically load all AI error types to avoid circular imports.
    
    This function inspects the errors_ai module and extracts all exception classes
    that inherit from APIError.
    
    Returns:
        List of AI error types
    """
    try:
        # Dynamically import the errors_ai module
        errors_ai_module = importlib.import_module("api.core.errors_ai")
        
        # Find all error classes that inherit from APIError
        error_types = []
        for name, obj in inspect.getmembers(errors_ai_module):
            if (inspect.isclass(obj) and 
                issubclass(obj, APIError) and 
                obj != APIError):
                error_types.append(obj)
                logger.debug(f"Loaded AI error type: {name}")
        
        return error_types
    except ImportError:
        logger.warning("AI error types module (errors_ai) not available")
        return []
    except Exception as e:
        logger.error(f"Error loading AI error types: {str(e)}")
        return []


class APIError(Exception):
    """Base API error."""
    
    def __init__(
        self,
        status_code: int,
        detail: str,
        code: str = "error",
        headers: Optional[Dict[str, str]] = None,
        data: Optional[Dict[str, Any]] = None,
    ):
        """
        Initialize API error.
        
        Args:
            status_code: HTTP status code
            detail: Error detail message
            code: Error code
            headers: Optional headers to include in the response
            data: Optional additional data for the error response
        """
        self.status_code = status_code
        self.detail = detail
        self.code = code
        self.headers = headers
        self.data = data or {}
        super().__init__(detail)


class NotFoundError(APIError):
    """Resource not found error."""
    
    def __init__(
        self,
        detail: str = "Resource not found",
        code: str = "not_found",
        **kwargs,
    ):
        """
        Initialize not found error.
        
        Args:
            detail: Error detail message
            code: Error code
            **kwargs: Additional arguments for APIError
        """
        super().__init__(status_code=404, detail=detail, code=code, **kwargs)


class ValidationAPIError(APIError):
    """Validation error."""
    
    def __init__(
        self,
        detail: str = "Validation error",
        code: str = "validation_error",
        errors: Optional[List[Dict[str, Any]]] = None,
        **kwargs,
    ):
        """
        Initialize validation error.
        
        Args:
            detail: Error detail message
            code: Error code
            errors: Validation errors
            **kwargs: Additional arguments for APIError
        """
        data = kwargs.pop("data", {})
        if errors:
            data["errors"] = errors
        super().__init__(
            status_code=422, detail=detail, code=code, data=data, **kwargs
        )


class UnauthorizedError(APIError):
    """Unauthorized error."""
    
    def __init__(
        self,
        detail: str = "Unauthorized",
        code: str = "unauthorized",
        **kwargs,
    ):
        """
        Initialize unauthorized error.
        
        Args:
            detail: Error detail message
            code: Error code
            **kwargs: Additional arguments for APIError
        """
        headers = kwargs.pop("headers", {})
        headers["WWW-Authenticate"] = "Bearer"
        super().__init__(
            status_code=401, detail=detail, code=code, headers=headers, **kwargs
        )


class ForbiddenError(APIError):
    """Forbidden error."""
    
    def __init__(
        self,
        detail: str = "Forbidden",
        code: str = "forbidden",
        **kwargs,
    ):
        """
        Initialize forbidden error.
        
        Args:
            detail: Error detail message
            code: Error code
            **kwargs: Additional arguments for APIError
        """
        super().__init__(status_code=403, detail=detail, code=code, **kwargs)


class BadRequestError(APIError):
    """Bad request error."""
    
    def __init__(
        self,
        detail: str = "Bad request",
        code: str = "bad_request",
        **kwargs,
    ):
        """
        Initialize bad request error.
        
        Args:
            detail: Error detail message
            code: Error code
            **kwargs: Additional arguments for APIError
        """
        super().__init__(status_code=400, detail=detail, code=code, **kwargs)


class InternalServerError(APIError):
    """Internal server error."""
    
    def __init__(
        self,
        detail: str = "Internal server error",
        code: str = "internal_server_error",
        **kwargs,
    ):
        """
        Initialize internal server error.
        
        Args:
            detail: Error detail message
            code: Error code
            **kwargs: Additional arguments for APIError
        """
        super().__init__(status_code=500, detail=detail, code=code, **kwargs)


class ConflictError(APIError):
    """Conflict error."""
    
    def __init__(
        self,
        detail: str = "Resource conflict",
        code: str = "conflict",
        **kwargs,
    ):
        """
        Initialize conflict error.
        
        Args:
            detail: Error detail message
            code: Error code
            **kwargs: Additional arguments for APIError
        """
        super().__init__(status_code=409, detail=detail, code=code, **kwargs)


class ServiceUnavailableError(APIError):
    """Service unavailable error."""
    
    def __init__(
        self,
        detail: str = "Service unavailable",
        code: str = "service_unavailable",
        **kwargs,
    ):
        """
        Initialize service unavailable error.
        
        Args:
            detail: Error detail message
            code: Error code
            **kwargs: Additional arguments for APIError
        """
        super().__init__(status_code=503, detail=detail, code=code, **kwargs)


class TooManyRequestsError(APIError):
    """Too many requests error."""
    
    def __init__(
        self,
        detail: str = "Too many requests",
        code: str = "too_many_requests",
        retry_after: Optional[int] = None,
        **kwargs,
    ):
        """
        Initialize too many requests error.
        
        Args:
            detail: Error detail message
            code: Error code
            retry_after: Retry after seconds
            **kwargs: Additional arguments for APIError
        """
        headers = kwargs.pop("headers", {})
        if retry_after is not None:
            headers["Retry-After"] = str(retry_after)
        super().__init__(
            status_code=429, detail=detail, code=code, headers=headers, **kwargs
        )


async def api_error_handler(request: Request, exc: APIError) -> JSONResponse:
    """
    Handle API errors.
    
    Args:
        request: Request instance
        exc: APIError instance
        
    Returns:
        JSONResponse: JSON response with error details
    """
    # Get translator for user's preferred language
    translator = await get_translator(request)
    
    # Translate error detail if possible
    detail = translator(exc.detail)
    
    # Build error response
    content = {
        "error": {
            "code": exc.code,
            "message": detail,
            "status": exc.status_code,
        }
    }
    
    # Add additional data if available
    if exc.data:
        content["error"].update(exc.data)
    
    # Add request ID if available
    request_id = request.headers.get("X-Request-ID")
    if request_id:
        content["error"]["request_id"] = request_id
    
    return JSONResponse(
        status_code=exc.status_code,
        content=content,
        headers=exc.headers,
    )


async def http_exception_handler(request: Request, exc: StarletteHTTPException) -> JSONResponse:
    """
    Handle HTTP exceptions.
    
    Args:
        request: Request instance
        exc: StarletteHTTPException instance
        
    Returns:
        JSONResponse: JSON response with error details
    """
    # Map status code to error code
    code_map = {
        400: "bad_request",
        401: "unauthorized",
        403: "forbidden",
        404: "not_found",
        405: "method_not_allowed",
        406: "not_acceptable",
        409: "conflict",
        410: "gone",
        415: "unsupported_media_type",
        422: "unprocessable_entity",
        429: "too_many_requests",
        500: "internal_server_error",
        501: "not_implemented",
        502: "bad_gateway",
        503: "service_unavailable",
        504: "gateway_timeout",
    }
    
    # Get translator for user's preferred language
    translator = await get_translator(request)
    
    # Translate error detail if possible
    detail = translator(exc.detail)
    
    # Build error response
    content = {
        "error": {
            "code": code_map.get(exc.status_code, "error"),
            "message": detail,
            "status": exc.status_code,
        }
    }
    
    # Add request ID if available
    request_id = request.headers.get("X-Request-ID")
    if request_id:
        content["error"]["request_id"] = request_id
    
    return JSONResponse(
        status_code=exc.status_code,
        content=content,
        headers=exc.headers,
    )


async def validation_exception_handler(request: Request, exc: RequestValidationError) -> JSONResponse:
    """
    Handle validation exceptions.
    
    Args:
        request: Request instance
        exc: RequestValidationError instance
        
    Returns:
        JSONResponse: JSON response with validation errors
    """
    # Get translator for user's preferred language
    translator = await get_translator(request)
    
    # Format validation errors
    errors = []
    for error in exc.errors():
        errors.append({
            "loc": error["loc"],
            "msg": translator(error["msg"]),
            "type": error["type"],
        })
    
    # Build error response
    content = {
        "error": {
            "code": "validation_error",
            "message": translator("Validation error"),
            "status": 422,
            "errors": errors,
        }
    }
    
    # Add request ID if available
    request_id = request.headers.get("X-Request-ID")
    if request_id:
        content["error"]["request_id"] = request_id
    
    return JSONResponse(
        status_code=422,
        content=content,
    )


async def pydantic_error_handler(request: Request, exc: ValidationError) -> JSONResponse:
    """
    Handle Pydantic validation errors.
    
    Args:
        request: Request instance
        exc: ValidationError instance
        
    Returns:
        JSONResponse: JSON response with validation errors
    """
    # Get translator for user's preferred language
    translator = await get_translator(request)
    
    # Format validation errors
    errors = []
    for error in exc.errors():
        errors.append({
            "loc": error["loc"],
            "msg": translator(error["msg"]),
            "type": error["type"],
        })
    
    # Build error response
    content = {
        "error": {
            "code": "validation_error",
            "message": translator("Validation error"),
            "status": 422,
            "errors": errors,
        }
    }
    
    # Add request ID if available
    request_id = request.headers.get("X-Request-ID")
    if request_id:
        content["error"]["request_id"] = request_id
    
    return JSONResponse(
        status_code=422,
        content=content,
    )


async def python_exception_handler(request: Request, exc: Exception) -> JSONResponse:
    """
    Handle unexpected Python exceptions.
    
    Args:
        request: Request instance
        exc: Exception instance
        
    Returns:
        JSONResponse: JSON response with error details
    """
    # Get translator for user's preferred language
    translator = await get_translator(request)
    
    # Generate response content
    content = {
        "error": {
            "code": "internal_server_error",
            "message": translator("An unexpected error occurred"),
            "status": 500,
        }
    }
    
    # Add request ID if available
    request_id = request.headers.get("X-Request-ID")
    if request_id:
        content["error"]["request_id"] = request_id
    
    # In debug mode, include exception details
    if settings.DEBUG:
        content["error"]["detail"] = str(exc)
        content["error"]["type"] = exc.__class__.__name__
    
    # Log the error
    import logging
    logging.exception(f"Unhandled exception: {exc}")
    
    return JSONResponse(
        status_code=500,
        content=content,
    )


def setup_error_handlers(app: FastAPI) -> None:
    """
    Set up error handlers for the application.
    
    Args:
        app: FastAPI application
    """
    app.add_exception_handler(APIError, api_error_handler)
    app.add_exception_handler(StarletteHTTPException, http_exception_handler)
    app.add_exception_handler(RequestValidationError, validation_exception_handler)
    app.add_exception_handler(ValidationError, pydantic_error_handler)
    
    # Import and register AI-specific error handlers 
    # Using an error-type registry pattern to avoid circular imports
    ai_error_types = _load_ai_error_types()
    
    # Register handlers for all AI error types
    for error_type in ai_error_types:
        app.add_exception_handler(error_type, api_error_handler)
    
    # Register specialized handlers if needed
    try:
        from api.core.errors_ai import AlgorithmError, ModelExecutionError
        
        # Register performance monitoring for AI errors (telemetry)
        from api.core.telemetry import register_error_monitoring
        register_error_monitoring(app, [AlgorithmError, ModelExecutionError])
    except ImportError:
        logger.warning("AI error monitoring could not be set up - telemetry module not available")
    except Exception as e:
        logger.error(f"Failed to set up AI error monitoring: {str(e)}")
    
    # Only add exception handler for all exceptions in production
    if not settings.DEBUG:
        app.add_exception_handler(Exception, python_exception_handler)
